#Assignment : 28 Nov 2022 Monday
Step 1: Download and install git https://git-scm.com/downloads
Step 2: Create a account on github
Step 3: Open git software
Step 4: to copy the project from git to the local machine
		git clone URL[https://github.com/javabysandeep/csj28]
Step 5: Check the file changes in staging area
		git status
Step 6: Get the files update from remote : git pull

# Commands
git clone : copy the project from remote machine to local machine
git status: to check the files in staging area
git add: add the files from workspace to staging area
git commit: add file from staging to local repository
git push: add files from local to remote repo
git pull : get the file from remote repo to local repo
git fetch : get the file from local to workspace

# variable and datatype
variable: it is a name given to a memory location address so it becomes easy to store access manipulate

    int age = 25;
    //age is variable
    //int datatype
    //25 is the value


__________________________________________________________________________________________________________________________________________________________________
# variables : To store data or access the data which is already stored
    # instance variable :
     why to use
     where they get the memory
     how many times they get the memory
     what are they?
        - instance variables are the variables which are defined at class and
            outside all class components
            i.e. outside of method, constructor, blocks, nested class
            without any static modifier

        - to store data which is object specific.
        - instance variables are stored inside the HEAP memory area
        - instance variables will get the memory every time object is created

    # static variable :
     why to use
     where they get the memory
     how many times they get the memory
     what are they?
             - static variables are the variables which are defined at class and
                 outside all class components
                 i.e. outside of method, constructor, blocks, nested class
                 with any static modifier

         - to store data which is common for all objects.
         - static variables are stored inside the class or method memory area
         - will be stored only once

# local variable :
     what are they?
         - local variables are the variables which are defined inside
                of method, constructor, blocks, method parameter
           with any static modifier
     why to use
     - to store data which is temporary calculations.
     - this data is not specific to common to all objects

     where they get the memory
     - local variables are stored inside the STACK memory area

     how many times they get the memory?
     - will be stored everytime method, block, constructor is called.

    whether local variables will get the default value?
        - local variables must be initialized before they are used otherwise CTE.
     - Local variables will not get default values. Developer is required to give initial or default value

    How to use local variables?
        - we define the variables inside the method/block/constructor
        - we use them inside the same method/block/constructor
        - we cannot access local variables outside
        - to access local variables we don't need any reference variable, ot class name
        - we access them directly


# methods :
    what:
        - it is a group of statements enclosed inside the curly braces
        - which has a name
        - which might accept input parameters ()
        - which might return some output values
        - even though method does not return anything it is mandatory to write void
        syntax:
            return_type nameOfMethod (input parameters) {
                //statements
            }
        e.g. 1. Method with no input no output
                 void m1(){}

        e.g. 2. Method with input no output
                void method(int number1){ }

        e.g. 3. Method with no input but returns output
                int method(){
                    return 1;
                 }

        e.g. 4. Method with  input and returns output
                int add(int number1, int number2){
                    return number1 + number2;
                 }

# Instance method:
    What - it is a method created at class level outside of constructor, block, methods without static modifier
       e.g.  int add(int number1, int number2){
                      return number1 + number2;
               }
    Why: to represent object specific behaviour/task
    How to access: we need reference variable to access instance method
    ** We cant define method inside another method/constructor/block

# static method:
    What - it is a method created at class level outside of constructor, block, methods
            with static modifier
       e.g.  static int add(int number1, int number2){
                      return number1 + number2;
               }
    Why: to represent behaviour/task common for all the objects
    How to access: we need class name to access static method

**** Non-static members [instance variable, instance method] cant be accessed from static method or static block









# constructors: To build objects
    default, zero, parameterized

# blocks : to maintain non-initialization activities of an object [ when & how many objects are created]
    instance, static

# nested class : To group multiple class which are logically doing same task.
    static, inner class, local inner class, anonymous class


// Constructor:
- why to use
    - we need constructors to create/build/construct the objects
    - object constructions is nothing but initialize the instance variables.
    - constructor is used to put some default value for object

- what is constructor?
    - it is a special method which has same name as of class name
    - this does not have any return type not even void
    - no access modifier [static, final, abstract, synchronized...]
    - constructor can accept the parameters[input]
        - zero parameterized constructor: if constructor does not accept any parameters
        - parmaterzied constructor: if constructor accepts the parameter
    * we can have a normal java method which has same name as of class name.

# Types of constructors
1. default constructor
    - it is a constructor provided by java compiler when developer does not provide any other constructor
    - default constructor does not accept any parameters and does not have any implementation
    - if developer provides any constructor then default constructor is not provided by java compiler

2. zero parameterized constructor
    - it does not accept any parameters
    - but we can write the implementation [body] inside the curly braces
    - it is provided by developer
    - e.g.
            class Student {
                Student() {

                }
            }

3. parameterized constructor
    - it does accept parameters
    - it is provided by developer
    - but we can write the implementation [body] inside the curly braces
    - e.g.
                class Student {
                    int id;
                    String name;

                    Student(int i, String s) {
                    // assigning local variables to the instance variables
                        id = i;
                        name = s;
                    }
                }

# how to access the constructor?
- at the time object creation we call constructors
    e.g.
        Student student = new Student();// call to the constructor
        Student student = new Student(1,"abc");// call to the param constructor

__________________________________________________________________________________________________________________________________________________________________
Blocks: - group of statements enclosed inside the curly braces
- instance block:
    - what is it ?: it is a block of code enclosed inside the curly braces at class level without static keyword
    - syntax:
            class Demo {
                {
                    //instance block
                }
    - why to use instance block:
        - we use it to perform non-initialization activities such as maintaining no. of objects created, logging, auditing
    - when instance block will be executed?
        - every time object is created instance block will called

- static block:
    - what is it ?: it is a block of code enclosed inside the curly braces at class level with static keyword
            }
     - syntax:
           class Demo {
               static {
                    //static block
                }
            }
    - why to use static block: to perform one-time activity such as connecting to the database, server, loading the drivers
    - when static block will be executed?
        - it will be executed only once at the time of class loading

Q. Order of execution between instance block, static block, constructor
Ans. static block --> instance block --> constructor






